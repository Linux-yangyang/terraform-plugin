// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: terraform_service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TerraformService_RenderTerraformCode_FullMethodName = "/api.TerraformService/RenderTerraformCode"
	TerraformService_ExecuteTerraformCmd_FullMethodName = "/api.TerraformService/ExecuteTerraformCmd"
	TerraformService_ResourceInfoGet_FullMethodName     = "/api.TerraformService/ResourceInfoGet"
)

// TerraformServiceClient is the client API for TerraformService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TerraformServiceClient interface {
	RenderTerraformCode(ctx context.Context, in *RenderTerraformCodeRequest, opts ...grpc.CallOption) (*RenderTerraformCodeResponse, error)
	ExecuteTerraformCmd(ctx context.Context, in *ExecuteTerraformCmdRequest, opts ...grpc.CallOption) (TerraformService_ExecuteTerraformCmdClient, error)
	ResourceInfoGet(ctx context.Context, in *ResourceInfoRequest, opts ...grpc.CallOption) (*ResourceInfoResponse, error)
}

type terraformServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTerraformServiceClient(cc grpc.ClientConnInterface) TerraformServiceClient {
	return &terraformServiceClient{cc}
}

func (c *terraformServiceClient) RenderTerraformCode(ctx context.Context, in *RenderTerraformCodeRequest, opts ...grpc.CallOption) (*RenderTerraformCodeResponse, error) {
	out := new(RenderTerraformCodeResponse)
	err := c.cc.Invoke(ctx, TerraformService_RenderTerraformCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terraformServiceClient) ExecuteTerraformCmd(ctx context.Context, in *ExecuteTerraformCmdRequest, opts ...grpc.CallOption) (TerraformService_ExecuteTerraformCmdClient, error) {
	stream, err := c.cc.NewStream(ctx, &TerraformService_ServiceDesc.Streams[0], TerraformService_ExecuteTerraformCmd_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &terraformServiceExecuteTerraformCmdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TerraformService_ExecuteTerraformCmdClient interface {
	Recv() (*ExecuteTerraformCmdResponse, error)
	grpc.ClientStream
}

type terraformServiceExecuteTerraformCmdClient struct {
	grpc.ClientStream
}

func (x *terraformServiceExecuteTerraformCmdClient) Recv() (*ExecuteTerraformCmdResponse, error) {
	m := new(ExecuteTerraformCmdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *terraformServiceClient) ResourceInfoGet(ctx context.Context, in *ResourceInfoRequest, opts ...grpc.CallOption) (*ResourceInfoResponse, error) {
	out := new(ResourceInfoResponse)
	err := c.cc.Invoke(ctx, TerraformService_ResourceInfoGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerraformServiceServer is the server API for TerraformService service.
// All implementations must embed UnimplementedTerraformServiceServer
// for forward compatibility
type TerraformServiceServer interface {
	RenderTerraformCode(context.Context, *RenderTerraformCodeRequest) (*RenderTerraformCodeResponse, error)
	ExecuteTerraformCmd(*ExecuteTerraformCmdRequest, TerraformService_ExecuteTerraformCmdServer) error
	ResourceInfoGet(context.Context, *ResourceInfoRequest) (*ResourceInfoResponse, error)
	mustEmbedUnimplementedTerraformServiceServer()
}

// UnimplementedTerraformServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTerraformServiceServer struct {
}

func (UnimplementedTerraformServiceServer) RenderTerraformCode(context.Context, *RenderTerraformCodeRequest) (*RenderTerraformCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenderTerraformCode not implemented")
}
func (UnimplementedTerraformServiceServer) ExecuteTerraformCmd(*ExecuteTerraformCmdRequest, TerraformService_ExecuteTerraformCmdServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteTerraformCmd not implemented")
}
func (UnimplementedTerraformServiceServer) ResourceInfoGet(context.Context, *ResourceInfoRequest) (*ResourceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceInfoGet not implemented")
}
func (UnimplementedTerraformServiceServer) mustEmbedUnimplementedTerraformServiceServer() {}

// UnsafeTerraformServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TerraformServiceServer will
// result in compilation errors.
type UnsafeTerraformServiceServer interface {
	mustEmbedUnimplementedTerraformServiceServer()
}

func RegisterTerraformServiceServer(s grpc.ServiceRegistrar, srv TerraformServiceServer) {
	s.RegisterService(&TerraformService_ServiceDesc, srv)
}

func _TerraformService_RenderTerraformCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenderTerraformCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformServiceServer).RenderTerraformCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerraformService_RenderTerraformCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformServiceServer).RenderTerraformCode(ctx, req.(*RenderTerraformCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerraformService_ExecuteTerraformCmd_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExecuteTerraformCmdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TerraformServiceServer).ExecuteTerraformCmd(m, &terraformServiceExecuteTerraformCmdServer{stream})
}

type TerraformService_ExecuteTerraformCmdServer interface {
	Send(*ExecuteTerraformCmdResponse) error
	grpc.ServerStream
}

type terraformServiceExecuteTerraformCmdServer struct {
	grpc.ServerStream
}

func (x *terraformServiceExecuteTerraformCmdServer) Send(m *ExecuteTerraformCmdResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TerraformService_ResourceInfoGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerraformServiceServer).ResourceInfoGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TerraformService_ResourceInfoGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerraformServiceServer).ResourceInfoGet(ctx, req.(*ResourceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TerraformService_ServiceDesc is the grpc.ServiceDesc for TerraformService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TerraformService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.TerraformService",
	HandlerType: (*TerraformServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RenderTerraformCode",
			Handler:    _TerraformService_RenderTerraformCode_Handler,
		},
		{
			MethodName: "ResourceInfoGet",
			Handler:    _TerraformService_ResourceInfoGet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteTerraformCmd",
			Handler:       _TerraformService_ExecuteTerraformCmd_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "terraform_service.proto",
}
